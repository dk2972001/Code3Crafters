{"ast":null,"code":"\"use client\";\n\nimport _slicedToArray from \"C:/Users/kisho/OneDrive/Pictures/home/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nvar MeasureText = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var style = _ref.style,\n    children = _ref.children;\n  var spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      isExceed: function isExceed() {\n        var span = spanRef.current;\n        return span.scrollHeight > span.clientHeight;\n      },\n      getHeight: function getHeight() {\n        return spanRef.current.clientHeight;\n      }\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      // zIndex: -9999,\n      // visibility: 'hidden',\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\nfunction cuttable(node) {\n  var type = typeof node;\n  return type === 'string' || type === 'number';\n}\nfunction getNodesLen(nodeList) {\n  var totalLen = 0;\n  nodeList.forEach(function (node) {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\nfunction sliceNodes(nodeList, len) {\n  var currLen = 0;\n  var currentNodeList = [];\n  for (var i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    var node = nodeList[i];\n    var canCut = cuttable(node);\n    var nodeLen = canCut ? String(node).length : 1;\n    var nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      var restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\n// Measure for the `text` is exceed the `rows` or not\nvar STATUS_MEASURE_NONE = 0;\nvar STATUS_MEASURE_START = 1;\nvar STATUS_MEASURE_NEED_ELLIPSIS = 2;\nvar STATUS_MEASURE_NO_NEED_ELLIPSIS = 3;\nvar lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nexport default function EllipsisMeasure(props) {\n  var enabledMeasure = props.enabledMeasure,\n    width = props.width,\n    text = props.text,\n    children = props.children,\n    rows = props.rows,\n    miscDeps = props.miscDeps,\n    onEllipsis = props.onEllipsis;\n  var nodeList = React.useMemo(function () {\n    return toArray(text);\n  }, [text]);\n  var nodeLen = React.useMemo(function () {\n    return getNodesLen(nodeList);\n  }, [text]);\n  // ========================= Full Content =========================\n  var fullContent = React.useMemo(function () {\n    return children(nodeList, false, false);\n  }, [text]);\n  // ========================= Cut Content ==========================\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    ellipsisCutIndex = _React$useState2[0],\n    setEllipsisCutIndex = _React$useState2[1];\n  var cutMidRef = React.useRef(null);\n  // ========================= NeedEllipsis =========================\n  var needEllipsisRef = React.useRef(null);\n  var _React$useState3 = React.useState(STATUS_MEASURE_NONE),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    needEllipsis = _React$useState4[0],\n    setNeedEllipsis = _React$useState4[1];\n  var _React$useState5 = React.useState(0),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    ellipsisHeight = _React$useState6[0],\n    setEllipsisHeight = _React$useState6[1];\n  // Trigger start measure\n  useLayoutEffect(function () {\n    if (enabledMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_START);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enabledMeasure, nodeList]);\n  // Measure process\n  useLayoutEffect(function () {\n    var _a, _b;\n    if (needEllipsis === STATUS_MEASURE_START) {\n      var isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null);\n      // For the accuracy issue, we add 1px to the height\n      setEllipsisHeight((((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0) + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]);\n  // ========================= Cut Measure ==========================\n  var cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  useLayoutEffect(function () {\n    var _a;\n    var _ref2 = ellipsisCutIndex || [0, 0],\n      _ref3 = _slicedToArray(_ref2, 2),\n      minIndex = _ref3[0],\n      maxIndex = _ref3[1];\n    if (minIndex !== maxIndex) {\n      var midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      var isOverflow = midHeight > ellipsisHeight;\n      var targetMidIndex = cutMidIndex;\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n      if (isOverflow) {\n        setEllipsisCutIndex([minIndex, targetMidIndex]);\n      } else {\n        setEllipsisCutIndex([targetMidIndex, maxIndex]);\n      }\n    }\n  }, [ellipsisCutIndex, cutMidIndex]);\n  // ========================= Text Content =========================\n  var finalContent = React.useMemo(function () {\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      var content = children(nodeList, false, false);\n      // Limit the max line count to avoid scrollbar blink\n      // https://github.com/ant-design/ant-design/issues/42958\n      if (needEllipsis !== STATUS_MEASURE_NO_NEED_ELLIPSIS && needEllipsis !== STATUS_MEASURE_NONE) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          style: Object.assign(Object.assign({}, lineClipStyle), {\n            WebkitLineClamp: rows\n          })\n        }, content);\n      }\n      return content;\n    }\n    return children(sliceNodes(nodeList, ellipsisCutIndex[0]), true, true);\n  }, [needEllipsis, ellipsisCutIndex, nodeList].concat(_toConsumableArray(miscDeps)));\n  // ============================ Render ============================\n  var measureStyle = {\n    width: width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true, true)));\n}","map":{"version":3,"names":["_slicedToArray","_toConsumableArray","React","toArray","useLayoutEffect","MeasureText","forwardRef","_ref","ref","style","children","spanRef","useRef","useImperativeHandle","isExceed","span","current","scrollHeight","clientHeight","getHeight","createElement","Object","assign","position","display","left","top","pointerEvents","backgroundColor","cuttable","node","type","getNodesLen","nodeList","totalLen","forEach","String","length","sliceNodes","len","currLen","currentNodeList","i","canCut","nodeLen","nextLen","restLen","push","slice","STATUS_MEASURE_NONE","STATUS_MEASURE_START","STATUS_MEASURE_NEED_ELLIPSIS","STATUS_MEASURE_NO_NEED_ELLIPSIS","lineClipStyle","overflow","WebkitBoxOrient","EllipsisMeasure","props","enabledMeasure","width","text","rows","miscDeps","onEllipsis","useMemo","fullContent","_React$useState","useState","_React$useState2","ellipsisCutIndex","setEllipsisCutIndex","cutMidRef","needEllipsisRef","_React$useState3","_React$useState4","needEllipsis","setNeedEllipsis","_React$useState5","_React$useState6","ellipsisHeight","setEllipsisHeight","_a","_b","isOverflow","cutMidIndex","Math","ceil","_ref2","_ref3","minIndex","maxIndex","midHeight","targetMidIndex","finalContent","content","WebkitLineClamp","concat","measureStyle","whiteSpace","margin","padding","Fragment"],"sources":["C:/Users/kisho/OneDrive/Pictures/home/node_modules/antd/es/typography/Base/Ellipsis.js"],"sourcesContent":["\"use client\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport useLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nconst MeasureText = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    style,\n    children\n  } = _ref;\n  const spanRef = React.useRef(null);\n  React.useImperativeHandle(ref, () => ({\n    isExceed: () => {\n      const span = spanRef.current;\n      return span.scrollHeight > span.clientHeight;\n    },\n    getHeight: () => spanRef.current.clientHeight\n  }));\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: spanRef,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      // zIndex: -9999,\n      // visibility: 'hidden',\n      pointerEvents: 'none',\n      backgroundColor: 'rgba(255, 0, 0, 0.65)'\n    }, style)\n  }, children);\n});\nfunction cuttable(node) {\n  const type = typeof node;\n  return type === 'string' || type === 'number';\n}\nfunction getNodesLen(nodeList) {\n  let totalLen = 0;\n  nodeList.forEach(node => {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    const node = nodeList[i];\n    const canCut = cuttable(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\n// Measure for the `text` is exceed the `rows` or not\nconst STATUS_MEASURE_NONE = 0;\nconst STATUS_MEASURE_START = 1;\nconst STATUS_MEASURE_NEED_ELLIPSIS = 2;\nconst STATUS_MEASURE_NO_NEED_ELLIPSIS = 3;\nconst lineClipStyle = {\n  display: '-webkit-box',\n  overflow: 'hidden',\n  WebkitBoxOrient: 'vertical'\n};\nexport default function EllipsisMeasure(props) {\n  const {\n    enabledMeasure,\n    width,\n    text,\n    children,\n    rows,\n    miscDeps,\n    onEllipsis\n  } = props;\n  const nodeList = React.useMemo(() => toArray(text), [text]);\n  const nodeLen = React.useMemo(() => getNodesLen(nodeList), [text]);\n  // ========================= Full Content =========================\n  const fullContent = React.useMemo(() => children(nodeList, false, false), [text]);\n  // ========================= Cut Content ==========================\n  const [ellipsisCutIndex, setEllipsisCutIndex] = React.useState(null);\n  const cutMidRef = React.useRef(null);\n  // ========================= NeedEllipsis =========================\n  const needEllipsisRef = React.useRef(null);\n  const [needEllipsis, setNeedEllipsis] = React.useState(STATUS_MEASURE_NONE);\n  const [ellipsisHeight, setEllipsisHeight] = React.useState(0);\n  // Trigger start measure\n  useLayoutEffect(() => {\n    if (enabledMeasure && width && nodeLen) {\n      setNeedEllipsis(STATUS_MEASURE_START);\n    } else {\n      setNeedEllipsis(STATUS_MEASURE_NONE);\n    }\n  }, [width, text, rows, enabledMeasure, nodeList]);\n  // Measure process\n  useLayoutEffect(() => {\n    var _a, _b;\n    if (needEllipsis === STATUS_MEASURE_START) {\n      const isOverflow = !!((_a = needEllipsisRef.current) === null || _a === void 0 ? void 0 : _a.isExceed());\n      setNeedEllipsis(isOverflow ? STATUS_MEASURE_NEED_ELLIPSIS : STATUS_MEASURE_NO_NEED_ELLIPSIS);\n      setEllipsisCutIndex(isOverflow ? [0, nodeLen] : null);\n      // For the accuracy issue, we add 1px to the height\n      setEllipsisHeight((((_b = needEllipsisRef.current) === null || _b === void 0 ? void 0 : _b.getHeight()) || 0) + 1);\n      onEllipsis(isOverflow);\n    }\n  }, [needEllipsis]);\n  // ========================= Cut Measure ==========================\n  const cutMidIndex = ellipsisCutIndex ? Math.ceil((ellipsisCutIndex[0] + ellipsisCutIndex[1]) / 2) : 0;\n  useLayoutEffect(() => {\n    var _a;\n    const [minIndex, maxIndex] = ellipsisCutIndex || [0, 0];\n    if (minIndex !== maxIndex) {\n      const midHeight = ((_a = cutMidRef.current) === null || _a === void 0 ? void 0 : _a.getHeight()) || 0;\n      const isOverflow = midHeight > ellipsisHeight;\n      let targetMidIndex = cutMidIndex;\n      if (maxIndex - minIndex === 1) {\n        targetMidIndex = isOverflow ? minIndex : maxIndex;\n      }\n      if (isOverflow) {\n        setEllipsisCutIndex([minIndex, targetMidIndex]);\n      } else {\n        setEllipsisCutIndex([targetMidIndex, maxIndex]);\n      }\n    }\n  }, [ellipsisCutIndex, cutMidIndex]);\n  // ========================= Text Content =========================\n  const finalContent = React.useMemo(() => {\n    if (needEllipsis !== STATUS_MEASURE_NEED_ELLIPSIS || !ellipsisCutIndex || ellipsisCutIndex[0] !== ellipsisCutIndex[1]) {\n      const content = children(nodeList, false, false);\n      // Limit the max line count to avoid scrollbar blink\n      // https://github.com/ant-design/ant-design/issues/42958\n      if (needEllipsis !== STATUS_MEASURE_NO_NEED_ELLIPSIS && needEllipsis !== STATUS_MEASURE_NONE) {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          style: Object.assign(Object.assign({}, lineClipStyle), {\n            WebkitLineClamp: rows\n          })\n        }, content);\n      }\n      return content;\n    }\n    return children(sliceNodes(nodeList, ellipsisCutIndex[0]), true, true);\n  }, [needEllipsis, ellipsisCutIndex, nodeList].concat(_toConsumableArray(miscDeps)));\n  // ============================ Render ============================\n  const measureStyle = {\n    width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, finalContent, needEllipsis === STATUS_MEASURE_START && ( /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign(Object.assign({}, measureStyle), lineClipStyle), {\n      WebkitLineClamp: rows\n    }),\n    ref: needEllipsisRef\n  }, fullContent)), needEllipsis === STATUS_MEASURE_NEED_ELLIPSIS && ellipsisCutIndex && ellipsisCutIndex[0] !== ellipsisCutIndex[1] && ( /*#__PURE__*/React.createElement(MeasureText, {\n    style: Object.assign(Object.assign({}, measureStyle), {\n      top: 400\n    }),\n    ref: cutMidRef\n  }, children(sliceNodes(nodeList, cutMidIndex), true, true))));\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}